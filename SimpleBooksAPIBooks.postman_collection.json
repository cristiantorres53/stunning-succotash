{
	"info": {
		"_postman_id": "3b4c8236-d402-462c-80cb-588c49a54aa4",
		"name": "SimpleBooksAPIBooks",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24469547"
	},
	"item": [
		{
			"name": "List of books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var schema = {\r",
							"  \"items\": {\r",
							"      \"type\": \"object\",\r",
							"       \"properties\": \r",
							"       { \r",
							"           \"id\":{\"type\":\"number\"},\r",
							"           \"name\":{\"type\":\"string\"},\r",
							"           \"type\":{\"type\":\"string\"},\r",
							"           \"available\":{\"type\":\"boolean\"}\r",
							"       }\r",
							"   }    \r",
							"};\r",
							"pm.test(\"Validate schema\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{UrlBase}}{{Books}}",
					"host": [
						"{{UrlBase}}{{Books}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a single book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var schema = {\r",
							"  \"items\": {\r",
							"      \"type\": \"object\",\r",
							"       \"properties\": \r",
							"       { \r",
							"           \"id\":{\"type\":\"number\"},\r",
							"           \"name\":{\"type\":\"string\"},\r",
							"           \"author\":{\"type\":\"string\"},\r",
							"           \"type\":{\"type\":\"string\"},\r",
							"           \"price\":{\"type\":\"number\"},\r",
							"           \"current-stock\":{\"type\":\"number\"},\r",
							"           \"available\":{\"type\":\"boolean\"}\r",
							"       }\r",
							"   }    \r",
							"};\r",
							"\r",
							"pm.test(\"Validate schema\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{UrlBase}}{{Books}}/2",
					"host": [
						"{{UrlBase}}{{Books}}"
					],
					"path": [
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a single book Fail",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var schema = {\r",
							"  \"items\": {\r",
							"      \"type\": \"object\",\r",
							"       \"properties\": \r",
							"       { \r",
							"           \"id\":{\"type\":\"number\"},\r",
							"           \"name\":{\"type\":\"string\"},\r",
							"           \"author\":{\"type\":\"string\"},\r",
							"           \"type\":{\"type\":\"string\"},\r",
							"           \"price\":{\"type\":\"number\"},\r",
							"           \"current-stock\":{\"type\":\"number\"},\r",
							"           \"available\":{\"type\":\"boolean\"}\r",
							"       }\r",
							"   }    \r",
							"};\r",
							"console.log(schema)\r",
							"pm.test(\"Validate schema\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{UrlBase}}{{Books}}/500",
					"host": [
						"{{UrlBase}}{{Books}}"
					],
					"path": [
						"500"
					]
				}
			},
			"response": []
		},
		{
			"name": "List of books Fail",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var schema = {\r",
							"  \"items\": {\r",
							"      \"type\": \"object\",\r",
							"       \"properties\": \r",
							"       { \r",
							"           \"id\":{\"type\":\"number\"},\r",
							"           \"name\":{\"type\":\"string\"},\r",
							"           \"type\":{\"type\":\"string\"},\r",
							"           \"available\":{\"type\":\"boolean\"}\r",
							"       }\r",
							"   }    \r",
							"};\r",
							"pm.test(\"Validate schema\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"console.log(response)\r",
							"const typeBooks = response.filter((book) => book.type === \"fiction\");\r",
							"console.log(typeBooks);\r",
							"\r",
							"const book = typeBooks;\r",
							"console.log(book);\r",
							"pm.test('los libros disponibles por tipo', ()=> {\r",
							"    pm.expect(book.type).to.eql(\"fiction\")\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{UrlBase}}/boooks",
					"host": [
						"{{UrlBase}}"
					],
					"path": [
						"boooks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Submit an order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = pm.response.json();\r",
							"var orderIdResponse = response.orderId;\r",
							"console.log(orderIdResponse)\r",
							"pm.environment.set(\"orderId\", orderIdResponse);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var schema = {\r",
							"  \"items\": {\r",
							"      \"type\": \"object\",\r",
							"       \"properties\": \r",
							"       { \r",
							"           \"created\":{\"type\":\"boolean\"},\r",
							"           \"orderId\":{\"type\":\"string\"},\r",
							"       }\r",
							"   }    \r",
							"};\r",
							"pm.test(\"Validate schema\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\": 1,\r\n  \"customerName\": \"John\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{UrlBase}}{{Order}}",
					"host": [
						"{{UrlBase}}{{Order}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Submit an order Fail",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var schema = {\r",
							"  \"items\": {\r",
							"      \"type\": \"object\",\r",
							"       \"properties\": \r",
							"       { \r",
							"           \"created\":{\"type\":\"boolean\"},\r",
							"           \"orderId\":{\"type\":\"string\"},\r",
							"       }\r",
							"   }    \r",
							"};\r",
							"pm.test(\"Validate schema\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\": 1,\r\n  \"customerName\": \"John\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{UrlBase}}{{Order}}",
					"host": [
						"{{UrlBase}}{{Order}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all orders Fail",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"el id mGfjdJK08JhweJxDL_SKs de la orden corresponde al CustomerName John\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    console.log(jsonData)\r",
							"    var orders=jsonData.find(x => x.id == 'mGfjdJK08JhweJxDL_SKs')\r",
							"    pm.expect(orders.customerName).to.equal(\"John\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{UrlBase}}{{Order}}",
					"host": [
						"{{UrlBase}}{{Order}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"el id mGfjdJK08JhweJxDL_SKs de la orden corresponde al CustomerName John\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    console.log(jsonData)\r",
							"    var orders=jsonData.find(x => x.id == 'mGfjdJK08JhweJxDL_SKs')\r",
							"    pm.expect(orders.customerName).to.equal(\"John\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{UrlBase}}{{Order}}",
					"host": [
						"{{UrlBase}}{{Order}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get an order",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"id\",pm.variables.replaceIn(\"{{$randomFullName}}\"))\r",
							"pm.environment.set(\"email\",pm.variables.replaceIn(\"{{$randomEmail}}\"))"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var schema = {\r",
							"    \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\":\r",
							"        {\r",
							"            \"id\": { \"type\": \"string\" },\r",
							"            \"bookId\": { \"type\": \"number\" },\r",
							"            \"customerName\": { \"type\": \"string\" },\r",
							"            \"createdBy\": { \"type\": \"string\" },\r",
							"            \"quantity\": { \"type\": \"number\" },\r",
							"            \"timestamp\": { \"type\": \"number\" }\r",
							"        }\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test(\"Validate schema\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"clientName\": \"{{name}}\",\r\n   \"clientEmail\": \"{{email}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{UrlBase}}{{Order}}{{orderId}}",
					"host": [
						"{{UrlBase}}{{Order}}{{orderId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get an order Fail",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var schema = {\r",
							"    \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\":\r",
							"        {\r",
							"            \"id\": { \"type\": \"string\" },\r",
							"            \"bookId\": { \"type\": \"number\" },\r",
							"            \"customerName\": { \"type\": \"string\" },\r",
							"            \"createdBy\": { \"type\": \"string\" },\r",
							"            \"quantity\": { \"type\": \"number\" },\r",
							"            \"timestamp\": { \"type\": \"number\" }\r",
							"        }\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test(\"Validate schema\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{UrlBase}}{{Order}}/5",
					"host": [
						"{{UrlBase}}{{Order}}"
					],
					"path": [
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update an order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"customerName\": \"John\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{UrlBase}}{{Order}}{{orderId}}",
					"host": [
						"{{UrlBase}}{{Order}}{{orderId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update an order Fail",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"customerName\": \"John\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{UrlBase}}{{Order}}{{ordersId}}",
					"host": [
						"{{UrlBase}}{{Order}}{{ordersId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete an order Fail",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{UrlBase}}{{Order}}",
					"host": [
						"{{UrlBase}}{{Order}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete an order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{UrlBase}}{{Order}}{{orderId}}",
					"host": [
						"{{UrlBase}}{{Order}}{{orderId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "API Authentication",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"name\",pm.variables.replaceIn(\"{{$randomFullName}}\"))\r",
							"pm.environment.set(\"email\",pm.variables.replaceIn(\"{{$randomEmail}}\"))"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = pm.response.json();\r",
							"var tokenResponse = response.accessToken;\r",
							"pm.environment.set(\"token\", tokenResponse);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"clientName\": \"{{name}}\",\r\n   \"clientEmail\": \"{{email}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{UrlBase}}{{Clients}}",
					"host": [
						"{{UrlBase}}{{Clients}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "API Authentication Fail",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"name\",pm.variables.replaceIn(\"{{$randomFullName}}\"))\r",
							"pm.environment.set(\"email\",pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"))"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = pm.response.json();\r",
							"var tokenResponse = response.accessToken;\r",
							"pm.environment.set(\"token\", tokenResponse);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"clientName\": \"{{name}}\",\r\n   \"clientEmail\": \"{{email}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{UrlBase}}{{Clients}}",
					"host": [
						"{{UrlBase}}{{Clients}}"
					]
				}
			},
			"response": []
		}
	]
}